name: Python application

on:
  push:
    branches: ["main","**"]
  pull_request:
    branches: ["main", "**"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    - name: Checar código
      uses: actions/checkout@v4

    - name: Verificador de Conventional Commits para eventos de Pull Request
      if: github.event_name == 'pull_request'
      uses: agenthunt/conventional-commit-checker-action@v2.0.0
      with:
        pr-title-regex: "^(.+)(?:(([^)s]+)))?: (.+)"
        pr-body-regex: "(.*)"  # Permitir corpo vazio ou qualquer texto
    
    

    - name: Verificador de Conventional Commits para eventos de Push
      if: github.event_name == 'push'
      run: |
        # Checks the latest commit message for conventional format
        last_commit_message=$(git log -1 --pretty=%B)
        echo "Last commit message: $last_commit_message"
        # Define a regex for conventional commits
        regex="^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+$"
        if [[ ! $last_commit_message =~ $regex ]]; then
          echo "A mensagem de commit não segue o padrão de Conventional Commits. (Commit message does not follow Conventional Commits format)"
          exit 1
        fi

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Rodar testes
      run: |
        python -m unittest discover -s ../test_mocks

    - name: Gerar versão semântica
      id: version
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN  }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: "Release v${{ github.run_number }}"
