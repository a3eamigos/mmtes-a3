name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# permissions:
#   contents: write  # Permissão para criar releases

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    - name: Checar código
      uses: actions/checkout@v4

    - name: Verificar mensagem de commit
      run: |
        if ! git log -1 --pretty=format:%s | grep -E '^(feat|fix|chore|docs|refactor|test|style):'; then
          echo "Erro: O commit deve começar com um dos seguintes prefixos: feat, fix, chore, docs, refactor, test, style."
          exit 1
        fi

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Rodar testes
      run: |
        python -m unittest discover

    - name: Verificar e criar nova tag se necessário
      id: tag-check
      run: |
        TAG_NAME="v$(git tag | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n 1 | awk -F. -v OFS=. '{$1=$1+0; print}')"
        if [ -z "$TAG_NAME" ]; then
          TAG_NAME="v0.1.0"  # Caso não haja tags, comece do zero
        else
          IFS='.' read -r MAJOR MINOR PATCH <<< "${TAG_NAME:1}"
          TAG_NAME="v$((MAJOR)).$((MINOR)).$((PATCH + 1))"  # Incrementa a patch version
        fi
        echo "Nova tag: $TAG_NAME"
        echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

    - name: Gerar versão semântica
      id: version
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: "Release v${{ github.run_number }}"